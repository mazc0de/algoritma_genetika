# -*- coding: utf-8 -*-
"""Daffa Hanifisyafiq - A11.2018.11387 - UAS KB - Algoritma Genetika.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v7hebaxcLfH16bnFQYaHODq_1UiDtk1B
"""

import math
import random
import numpy as np

class genetic_algorithm:
  # 1. Pembentukan Chromosome
  jml_chromosome = 6
  gen = ["a","b","c","d"]
  nilai_per_gen = {
      'min':0,
      'max':10
  }

  nilai_crossover = 50/100
  nilai_mutasi = 10/100
  total_gen = 1000
  gen_selanjutnya = np.arange(4)
  stop = False

  # 2. Inisialisasi
  def __init__(self):
    self.chromosome_pertama = np.random.randint(low=[0,0,0,0], high=[30,10,10,10], size=(self.jml_chromosome, len(self.gen)))
    print("#=====Inisialisasi=====#")
    print(self.chromosome_pertama)
    print("========================")

  # 3. Evaluasi Chromosome
  def evaluasi_chromosome(self, chrom, generasi):
    print("Generate Ke- ["+str(generasi)+"]")

    jml_chromo = len(chrom)
    o = np.arange(jml_chromo)
    fitness = np.arange(jml_chromo, dtype='f')

    for x in range(len(chrom)):
      fo = abs((chrom[x][0]+2*chrom[x][1]+3*chrom[x][2]+4*chrom[x][3])-30)
      o[x]=fo

      # 4. Seleksi Chromosome
      fitn = 1/(fo+1)

      fitness[x] =fitn
      if(fitn == 1):
        self.stop = True
      print("Chromosome Ke- {0} : {1}, Fitness = {2}".format(x, np.array2string(chrom[x], separator=','), fitn))
    print("Fitness Telah Selesai")
    print(o)

    probabilitas = np.arange(jml_chromo, dtype='f')
    total_fitness = fitness.sum()
    probabilitas = fitness / total_fitness
    print("Total Fitness : {}".format(str(total_fitness)))
    print("Rata-rata fitness : {}".format(str(np.average(fitness))))
    print("Probabilitas : {}".format(np.array2string(probabilitas, separator=',')))
    print("Probabilitas Yang Paling Tinggi : {}, Terdapat Pada Chromosome Ke- {}".format(probabilitas[probabilitas.argmax()], str(probabilitas.argmax)))
    print("Chromosome Yang Mungkin Akan Terpilih : {}".format(np.array2string(chrom[probabilitas.argmax()], separator=',')))
    print("")
    print("")
    self.gen_selanjutnya = chrom[probabilitas.argmax()]

    C = np.arange(jml_chromo, dtype='f')
    total_x = 0
    for x in range(len(probabilitas)):
      total_x += probabilitas[x]
      C[x] = total_x
    
    R = np.random.sample(len(fitness))
    chromosome_baru = np.arange(jml_chromo*len(self.gen)).reshape(jml_chromo, len(self.gen))

    for y in range(len(R)):
      for k in range(len(chromosome_baru)):
        if(R[y] < C[0]):
          chromosome_baru[y] = chrom[0]
        elif((C[k-1] < R[y]) & (R[y] < C[k])):
          chromosome_baru[y] = chrom[k]
    
    # 5. Crossover
    R = np.random.sample(jml_chromo)
    index_chromosome_parent = []
    for p in range(len(R)):
      if(R[p] < self.nilai_crossover):
        index_chromosome_parent.append(p)

    posisi_crossover = np.random.randint(low=1, high=len(self.gen), size= len(index_chromosome_parent))

    offspring = np.arange(len(self.gen)*len(index_chromosome_parent)).reshape(len(index_chromosome_parent), len(self.gen))
    for i_parent in range(len(index_chromosome_parent)):
      index_chromosome_1 = index_chromosome_parent[i_parent]
      if(i_parent == len(index_chromosome_parent)-1):
        index_chromosome_2 = index_chromosome_parent[0]
      else:
        index_chromosome_2 = index_chromosome_parent[i_parent+1]
      
      cut_point = posisi_crossover[i_parent]
      for p in range(len(chromosome_baru[index_chromosome_1])):
        if(p >= posisi_crossover[i_parent]):
          offspring[i_parent][p] = chromosome_baru[index_chromosome_2][p]
        else:
          offspring[i_parent][p] = chromosome_baru[index_chromosome_1][p]

    for x in range(len(offspring)):
      chromosome_baru[index_chromosome_parent[x]] = offspring[x]


    # 6. Mutasi
    total_gen = len(chrom) * len(chrom[0])
    jml_mutasi = self.nilai_mutasi * total_gen
    jml_mutasi = int(jml_mutasi)

    random_i_mutasi = np.random.randint(low=0, high=total_gen, size=jml_mutasi)

    for x in range(len(random_i_mutasi)):
      index_mutasi = random_i_mutasi[x]
      banyak_chromosome = len(chrom)
      banyak_gen = len(chrom[0])
      random_value = random.randint(self.nilai_per_gen['min'], self.nilai_per_gen['max'])
      if(index_mutasi <= banyak_gen):
        chromosome_baru[0][index_mutasi-1]
      else:
        posisi_y = index_mutasi / banyak_gen
        posisi_y = int(posisi_y)
        posisi_x = index_mutasi % banyak_gen
        chromosome_baru[posisi_y][posisi_x] = random_value
    return chromosome_baru

  def start(self):
    chromosome_sekarang = self.chromosome_pertama
    for generating in range(0, self.total_gen):
      if(self.stop != True):
        chromosome_sekarang = self.evaluasi_chromosome(chromosome_sekarang, generating)
    print("----------------------------------------------")
    print("Proses telah selesai!")
    print("Chromosome yang tertinggi adalah :")
    print(self.gen_selanjutnya)

jalankan = genetic_algorithm()
jalankan.start()